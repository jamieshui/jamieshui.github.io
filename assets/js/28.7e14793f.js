(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{431:function(v,_,t){"use strict";t.r(_);var e=t(56),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"osi七层模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#osi七层模型"}},[v._v("#")]),v._v(" OSI七层模型")]),v._v(" "),t("ul",[t("li",[v._v("OSI（Open System Interconnect），是ISO（国际标准化组织）组织在1985年研究的网络互联模型。")]),v._v(" "),t("li",[v._v("该体系结构标准定义了网络互连的七层框架（"),t("strong",[v._v("物理层、数据链路层、网络层、传输层、会话层、表示层和应用层")]),v._v("）。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.6zs0rsjv9q80.png",alt:"image"}})]),v._v(" "),t("ul",[t("li",[t("p",[v._v("实际上，计算机网络体系结构分为3种："),t("code",[v._v("OSI")]),v._v("体系结构、"),t("code",[v._v("TCP")]),v._v(" / "),t("code",[v._v("IP")]),v._v("体系结构、五层体系结构")]),v._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[t("code",[v._v("OSI")]),v._v("体系结构：概念清楚 & 理念完整，但复杂 & 不实用")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("TCP")]),v._v(" / "),t("code",[v._v("IP")]),v._v("体系结构：含了一系列构成互联网基础的网络协议，是"),t("code",[v._v("Internet")]),v._v("的核心协议 & 被广泛应用于局域网 和 广域网")])]),v._v(" "),t("li",[t("p",[v._v("五层体系结构：融合了"),t("code",[v._v("OSI")]),v._v(" 与 "),t("code",[v._v("TCP")]),v._v(" / "),t("code",[v._v("IP")]),v._v("的体系结构，目的是为了学习 & 讲解计算机原理")])])])])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.b9vuh78dzio.png",alt:"image"}})]),v._v(" "),t("h2",{attrs:{id:"http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[v._v("#")]),v._v(" HTTP")]),v._v(" "),t("h3",{attrs:{id:"http-1-0-1-1-2-0-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-1-1-2-0-区别"}},[v._v("#")]),v._v(" HTTP 1.0/1.1/2.0 区别")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("协议版本")]),v._v(" "),t("th",[v._v("特点")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("HTTP 1.0")]),v._v(" "),t("td",[v._v("无状态、无连接")])]),v._v(" "),t("tr",[t("td",[v._v("HTTP 1.1")]),v._v(" "),t("td",[v._v("1. 长（持久）连接（即在同一个"),t("code",[v._v("TCP")]),v._v("的连接中可传送多个"),t("code",[v._v("HTTP")]),v._v("请求 & 响应）"),t("br"),v._v("2. 请求管道化"),t("br"),v._v("3. 增加缓存处理（新的字段如"),t("code",[v._v("cache-control")]),v._v("）"),t("br"),v._v("4. 增加"),t("code",[v._v("Host")]),v._v("字段、支持断点传输等（把文件分成几部分）")])]),v._v(" "),t("tr",[t("td",[v._v("HTTP 2.0")]),v._v(" "),t("td",[v._v("1. 二进制分帧"),t("br"),v._v("2. 多路复用（或连接共享）"),t("br"),v._v("3. 头部压缩"),t("br"),v._v("4. 服务器推送")])])])]),v._v(" "),t("p",[v._v("*参考资料："),t("a",{attrs:{href:"https://blog.csdn.net/qq_36183935/article/details/81156225?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.control",target:"_blank",rel:"noopener noreferrer"}},[v._v("《HTTP1.0、HTTP1.1、HTTP2.0的关系和区别》"),t("OutboundLink")],1)]),v._v(" "),t("h3",{attrs:{id:"http-常见状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-常见状态码"}},[v._v("#")]),v._v(" HTTP 常见状态码")]),v._v(" "),t("ul",[t("li",[v._v("一般 1XX 代表"),t("strong",[v._v("服务器接收到请求")]),v._v("、2XX 代表"),t("strong",[v._v("成功")]),v._v("、3XX 代表"),t("strong",[v._v("重定向")]),v._v("、4XX 代表"),t("strong",[v._v("客户端错误")]),v._v("、5XX 代表"),t("strong",[v._v("服务器端错误")]),v._v("。")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("状态码")]),v._v(" "),t("th",[v._v("描述")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("101")]),v._v(" "),t("td",[v._v("切换请求协议，从 HTTP 切换到 WebSocket")])]),v._v(" "),t("tr",[t("td",[v._v("200")]),v._v(" "),t("td",[v._v("请求成功，有响应体")])]),v._v(" "),t("tr",[t("td",[v._v("301")]),v._v(" "),t("td",[v._v("永久重定向：会缓存")])]),v._v(" "),t("tr",[t("td",[v._v("302")]),v._v(" "),t("td",[v._v("临时重定向：不会缓存")])]),v._v(" "),t("tr",[t("td",[v._v("304")]),v._v(" "),t("td",[t("strong",[v._v("协商缓存命中")])])]),v._v(" "),t("tr",[t("td",[v._v("400")]),v._v(" "),t("td",[v._v("请求错误")])]),v._v(" "),t("tr",[t("td",[v._v("403")]),v._v(" "),t("td",[v._v("服务器禁止访问")])]),v._v(" "),t("tr",[t("td",[v._v("404")]),v._v(" "),t("td",[v._v("资源未找到")])]),v._v(" "),t("tr",[t("td",[v._v("500")]),v._v(" "),t("td",[v._v("服务器端错误")])]),v._v(" "),t("tr",[t("td",[v._v("503")]),v._v(" "),t("td",[v._v("服务器繁忙")])])])]),v._v(" "),t("h3",{attrs:{id:"缓存控制策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存控制策略"}},[v._v("#")]),v._v(" 缓存控制策略")]),v._v(" "),t("ul",[t("li",[v._v("HTTP 缓存又分为"),t("strong",[v._v("强缓存")]),v._v("和"),t("strong",[v._v("协商缓存")]),v._v("：\n"),t("ul",[t("li",[v._v("首先通过 "),t("code",[v._v("Cache-Control")]),v._v(" 验证强缓存是否可用，如果强缓存可用，那么直接读取缓存；")]),v._v(" "),t("li",[v._v("如果不可以，那么进入协商缓存阶段，发起 HTTP 请求，服务器通过请求头中是否带上 "),t("code",[v._v("If-Modified-Since")]),v._v(" 和 "),t("code",[v._v("If-None-Match")]),v._v(" 这些条件请求字段检查资源是否更新：\n"),t("ul",[t("li",[v._v("若资源更新，那么返回资源和 "),t("strong",[t("code",[v._v("200")])]),v._v(" 状态码；")]),v._v(" "),t("li",[v._v("若资源未更新，那么告诉浏览器直接使用缓存获取资源，并返回**"),t("code",[v._v("304")]),v._v("**状态码。")])])])])])]),v._v(" "),t("h2",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[v._v("#")]),v._v(" TCP")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("Transmission Control Protocol")]),v._v("，即 传输控制协议。")])]),v._v(" "),t("blockquote",[t("ol",[t("li",[v._v("属于 传输层通信协议")]),v._v(" "),t("li",[v._v("基于"),t("code",[v._v("TCP")]),v._v("的应用层协议有"),t("code",[v._v("HTTP")]),v._v("、"),t("code",[v._v("SMTP")]),v._v("、"),t("code",[v._v("FTP")]),v._v("、"),t("code",[v._v("Telnet")]),v._v(" 和 "),t("code",[v._v("POP3")])])])]),v._v(" "),t("h3",{attrs:{id:"三次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[v._v("#")]),v._v(" 三次握手")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA3MjA1NzA5MzY3.lhcokjn9xb4.gif",alt:"aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA3MjA1NzA5MzY3"}})]),v._v(" "),t("h4",{attrs:{id:"三次握手的步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三次握手的步骤"}},[v._v("#")]),v._v(" 三次握手的步骤")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("最开始的时候客户端和服务器都是处于 CLOSED 状态。主动打开连接的为客户端，被动打开连接的是服务器。")])]),v._v(" "),t("p",[v._v("TCP 服务器进程先创建传输控制块 TCB ，时刻准备接受客户进程的连接请求，此时服务器就进入了 LISTEN（监听）状态；")])]),v._v(" "),t("ol",[t("li",[v._v("TCP 客户进程先创建传输控制块 TCB，然后向服务器发出连接请求报文，这时报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。"),t("strong",[v._v("TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。")])]),v._v(" "),t("li",[v._v("TCP 服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中 ACK=1，SYN=1，确认号是 ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP 服务器进程进入了 SYN-RCVD（同步收到）状态。"),t("strong",[v._v("这个报文也不能携带数据，但是同样要消耗一个序号。")])]),v._v(" "),t("li",[v._v("TCP 客户进程收到确认后，还要向服务器给出确认。确认报文中 ACK=1，ack=y+1，自己的序列号 seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态，当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。"),t("strong",[v._v("TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.15qkrf7nijc0.png",alt:"image"}})]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.hhsi5d8zrww.png",alt:"image"}})]),v._v(" "),t("h4",{attrs:{id:"三次握手的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三次握手的作用"}},[v._v("#")]),v._v(" 三次握手的作用")]),v._v(" "),t("ul",[t("li",[v._v("确认双方的接收及发送能力是否正常。")]),v._v(" "),t("li",[v._v("指定自己的初始化序列号，为后期可靠传送做准备。")]),v._v(" "),t("li",[v._v("对于 HTTPS 协议，该过程还会进行数字证书的验证及加密密钥的生成。")])]),v._v(" "),t("h4",{attrs:{id:"为什么不是两次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是两次握手"}},[v._v("#")]),v._v(" 为什么不是两次握手？")]),v._v(" "),t("ul",[t("li",[v._v("差别在于最后客户端对服务器的确认。防止已经失效的连接报文请求突然传送至服务器，从而产生错误（服务器端因接收了"),t("strong",[v._v("早已失效的连接请求报文")]),v._v("，从而一直等待客户端请求，最终导致"),t("strong",[v._v("形成死锁、浪费资源")]),v._v("）。")])]),v._v(" "),t("blockquote",[t("p",[v._v("例如：客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留时间较长。此时由于客户端迟迟没有收到 ACK 确认报文，以为服务器没有收到，会重新发送，但是网络通畅时之前的报文又传送过来了，于是客户端和服务器会建立两次连接，造成不必要的错误和资源浪费。")]),v._v(" "),t("p",[v._v("而若是三次握手，即使失效报文传至服务器，服务器回复 ACK 报文，客户端也不会再次确认，于是连接不会再次建立。")])]),v._v(" "),t("h4",{attrs:{id:"为什么不是四次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是四次握手"}},[v._v("#")]),v._v(" 为什么不是四次握手？")]),v._v(" "),t("ul",[t("li",[v._v("因为服务器向客户端发送 ACK 报文和 SYN 报文的流程可以优化为一次握手。")])]),v._v(" "),t("h3",{attrs:{id:"四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[v._v("#")]),v._v(" 四次挥手")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA3MjA1NzU2MjU1.49487cmfl8a0.gif",alt:"aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA3MjA1NzU2MjU1"}})]),v._v(" "),t("h4",{attrs:{id:"四次挥手的步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手的步骤"}},[v._v("#")]),v._v(" 四次挥手的步骤")]),v._v(" "),t("blockquote",[t("p",[v._v("数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。")])]),v._v(" "),t("ol",[t("li",[t("p",[v._v("客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为 seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 "),t("strong",[v._v("TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。")])])]),v._v(" "),t("li",[t("p",[v._v("服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号 seq=v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向释放了 TCP 连接，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。")]),v._v(" "),t("blockquote",[t("p",[v._v("客户端收到服务器的确认请求后，此时客户端就进入 FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。")])])]),v._v(" "),t("li",[t("p",[v._v("服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于处于半关闭状态时，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。")])]),v._v(" "),t("li",[t("p",[v._v("客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是 seq=u+1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。注意此时 TCP 连接还没有释放，必须经过 "),t("strong",[v._v("2*MSL")]),v._v("（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。")]),v._v(" "),t("blockquote",[t("p",[v._v("服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。可以看到，服务器结束 TCP 连接的时间要比客户端早一些。")])])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.eebwd5s7zmw.png",alt:"image"}})]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.3vcr93r4mlm0.png",alt:"image"}})]),v._v(" "),t("h4",{attrs:{id:"为什么不是三次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是三次挥手"}},[v._v("#")]),v._v(" 为什么不是三次挥手？")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("服务端在接收到"),t("code",[v._v("FIN")]),v._v("， 往往不会立即返回"),t("code",[v._v("FIN")]),v._v("，必须等到服务端所有数据都发送完毕了，才能发"),t("code",[v._v("FIN")]),v._v("。因此先发一个"),t("code",[v._v("ACK")]),v._v("表示已经收到客户端的"),t("code",[v._v("FIN")]),v._v("，延迟一段时间才发"),t("code",[v._v("FIN")]),v._v("。这就造成了四次挥手。")])]),v._v(" "),t("li",[t("p",[v._v("如果是三次挥手，等于说服务端将"),t("code",[v._v("ACK")]),v._v("和"),t("code",[v._v("FIN")]),v._v("的发送合并为一次挥手，这个时候长时间的延迟可能会导致客户端误以为"),t("code",[v._v("FIN")]),v._v("没有到达客户端，从而让客户端不断的重发"),t("code",[v._v("FIN")]),v._v("。")])])]),v._v(" "),t("h4",{attrs:{id:"为什么需要等待-2msl-maximum-segement-lifetime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要等待-2msl-maximum-segement-lifetime"}},[v._v("#")]),v._v(" 为什么需要等待 2MSL（Maximum Segement Lifetime）？")]),v._v(" "),t("ul",[t("li",[v._v("假设不等待，如果服务端还有很多数据包要给客户端发，而此时客户端端口被新应用占据，那么就会接收到无用的数据包，造成数据包混乱。")]),v._v(" "),t("li",[v._v("等待"),t("code",[v._v("2MSL")]),v._v("的意义：\n"),t("ul",[t("li",[v._v("1 个"),t("code",[v._v("MSL")]),v._v("确保四次挥手中客户端最后的"),t("code",[v._v("ACK")]),v._v("报文最终能达到服务器端。")]),v._v(" "),t("li",[v._v("1 个"),t("code",[v._v("MSL")]),v._v("确保服务器端没有收到"),t("code",[v._v("ACK")]),v._v("后重传的"),t("code",[v._v("FIN")]),v._v("报文可以到达。")])])])]),v._v(" "),t("h3",{attrs:{id:"流量控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[v._v("#")]),v._v(" 流量控制")]),v._v(" "),t("ul",[t("li",[v._v("TCP 提供了流量控制的服务，这个服务的主要目的是控制发送方的发送速率，保证接收方来得及接收。因为一旦发送的速率大于接收方所能接收的速率，就会造成报文段的丢失。")]),v._v(" "),t("li",[v._v("接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。")])]),v._v(" "),t("h3",{attrs:{id:"拥塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[v._v("#")]),v._v(" 拥塞控制")]),v._v(" "),t("ul",[t("li",[v._v("TCP 的拥塞控制主要是根据网络中的拥塞情况来控制发送方数据的发送速率，如果网络处于拥塞的状态，发送方就减小发送的速率，这样一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。")]),v._v(" "),t("li",[v._v("TCP 的拥塞控制主要使用了四个机制，分别是"),t("strong",[v._v("慢启动")]),v._v("、"),t("strong",[v._v("拥塞避免")]),v._v("、"),t("strong",[v._v("快速重传")]),v._v("和"),t("strong",[v._v("快速恢复")]),v._v("。\n"),t("ul",[t("li",[v._v("慢启动的基本思想是，因为在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT （Round Trip Time，网络往返时间）时间后，发送窗口的长度就会加倍。当发送窗口的大小达到一个阈值的时候就进入拥塞避免算法。")]),v._v(" "),t("li",[v._v("拥塞避免算法是为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。这样将窗口的增长速率由指数增长，变为加法线性增长。")]),v._v(" "),t("li",[v._v("快速重传指的是，当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。")]),v._v(" "),t("li",[v._v("快速恢复是对快速重传的后续处理，因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。")])])]),v._v(" "),t("li",[v._v("TCP 认为网络拥塞的主要依据是报文段的重传次数，它会根据网络中的拥塞程度，通过调整慢启动的阀值，然后交替使用上面四种机制来达到拥塞控制的目的。")])]),v._v(" "),t("h3",{attrs:{id:"可靠通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可靠通信"}},[v._v("#")]),v._v(" 可靠通信")]),v._v(" "),t("h4",{attrs:{id:"tcp如何保证数据的可靠传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp如何保证数据的可靠传输"}},[v._v("#")]),v._v(" TCP如何保证数据的可靠传输？")]),v._v(" "),t("p",[t("strong",[v._v("（1）校验和")])]),v._v(" "),t("p",[v._v("数据传输过程中，发送的数据段都会当成一个16位的整数，将整数加起来得到校验和。发送方在发送数据前计算校验和，接收方收到数据后对数据使用同样方式计算求出校验和，与发送方的进行比对。")]),v._v(" "),t("p",[t("strong",[v._v("（2）确认应答和序列号")])]),v._v(" "),t("p",[v._v("TCP传输时对每个字节的数据进行编号，即序列号。同时每次接收方收到数据后，都会对传输方发送 ACK 确认应答。")]),v._v(" "),t("p",[t("strong",[v._v("（3）超时重传")])]),v._v(" "),t("p",[v._v("发送数据后等待一段时间没有收到 ACK 报文，将对刚才发送的数据进行重新发送。")]),v._v(" "),t("p",[t("strong",[v._v("（4）连接管理")])]),v._v(" "),t("p",[v._v("三次握手和四次挥手。")]),v._v(" "),t("p",[t("strong",[v._v("（5）流量控制")])]),v._v(" "),t("p",[v._v("TCP根据接收端对数据的处理能力，决定发送方的发送速度。")]),v._v(" "),t("p",[t("strong",[v._v("（6）拥塞控制")])]),v._v(" "),t("p",[v._v("TCP通过维护拥塞窗口实现拥塞控制，窗口会根据当前拥塞情况增大或缩小。")]),v._v(" "),t("h2",{attrs:{id:"udp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[v._v("#")]),v._v(" UDP")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("User Datagram Protocol")]),v._v("，即 用户数据报协议。")])]),v._v(" "),t("blockquote",[t("ol",[t("li",[v._v("属于 传输层通信协议")]),v._v(" "),t("li",[v._v("基于"),t("code",[v._v("UDP")]),v._v("的应用层协议有 "),t("code",[v._v("TFTP")]),v._v("、"),t("code",[v._v("SNMP")]),v._v(" 与 "),t("code",[v._v("DNS")])])])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("特点：无连接的、不可靠的、面向报文、无拥塞控制。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/jamieshui/image-hosting@master/picx-image-hosting/image.56z43hjx4k80.png",alt:"image"}})])])]),v._v(" "),t("h2",{attrs:{id:"websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[v._v("#")]),v._v(" WebSocket")]),v._v(" "),t("ul",[t("li",[v._v("WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。")]),v._v(" "),t("li",[v._v("使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。")]),v._v(" "),t("li",[v._v("WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);