(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{436:function(v,_,e){"use strict";e.r(_);var i=e(56),a=Object(i.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[v._v("#")]),v._v(" Webpack")]),v._v(" "),e("ul",[e("li",[v._v("Webpack 是一个高度可配置的前端构建工具，它主要用于模块化打包和优化前端资源（如 JavaScript、CSS、HTML、图片等）。Webpack 的核心思想是将前端项目中的各种资源视为模块，通过一定的规则和插件，将这些模块打包成适用于浏览器的静态资源。")])]),v._v(" "),e("ol",[e("li",[v._v("入口（Entry）：Webpack 需要一个入口文件作为构建依赖图的起点，通常是项目中的一个 JavaScript 文件，如 "),e("code",[v._v("index.js")]),v._v("。")]),v._v(" "),e("li",[v._v("输出（Output）：Webpack 将根据入口文件和其他依赖，生成一个或多个输出文件（通常是打包后的 JavaScript、CSS、HTML 文件等）。")]),v._v(" "),e("li",[v._v("Loaders：由于 Webpack 默认只能处理 JavaScript 模块，Loaders 用于转换其他类型的文件（如 CSS、LESS、SASS、TypeScript 等），使其成为 Webpack 可以处理的有效模块。")]),v._v(" "),e("li",[v._v("插件（Plugins）：插件用于执行更高级的任务，如优化构建、压缩代码、生成 HTML 模板等。插件通过扩展 Webpack 的功能，提供更多的构建和优化选项。")]),v._v(" "),e("li",[v._v("模式（Mode）：Webpack 支持多种模式，如 "),e("code",[v._v("development")]),v._v("（开发模式）和 "),e("code",[v._v("production")]),v._v("（生产模式）。不同模式下，Webpack 会应用不同的默认优化策略。")])]),v._v(" "),e("blockquote",[e("p",[v._v("面试考察要点：")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("基本概念：了解对于 Webpack 的核心概念（如入口、输出、Loaders、插件等）的理解。")])]),v._v(" "),e("li",[e("p",[v._v("配置：询问如何配置 Webpack，以满足项目的构建和打包需求。")])]),v._v(" "),e("li",[e("p",[v._v("Loaders 和插件：探讨在实际项目中使用过哪些常见的 Loaders 和插件，以及它们的作用和配置方法。")])]),v._v(" "),e("li",[e("p",[v._v("代码拆分（Code Splitting）：了解对于代码拆分的理解和实践，例如如何使用动态导入、配置多个入口等。")])]),v._v(" "),e("li",[e("p",[v._v("优化策略：询问在实际项目中使用 Webpack 时采用的优化策略，如压缩、缓存、Tree Shaking 等。")])]),v._v(" "),e("li",[e("p",[v._v("开发环境配置：了解如何配置开发环境，例如使用 Webpack Dev Server 进行实时编译和热更新。")])]),v._v(" "),e("li",[e("p",[v._v("调试：评估在遇到 Webpack 构建问题时的调试技巧和解决方法。")])]),v._v(" "),e("li",[e("p",[v._v("持续集成：探讨如何将 Webpack 集成到 CI//CD（持续集成和持续部署）流程中，提高自动化程度和开发效率。")])]),v._v(" "),e("li",[e("p",[v._v("跨平台构建：了解在不同平台（如 Web、移动端、桌面应用等）项目中如何使用和配置 Webpack。")])]),v._v(" "),e("li",[e("p",[v._v("最佳实践：探讨在项目中遵循的 Webpack 最佳实践，以及在面临性能或其他挑战时所采取的解决方案。")])])])]),v._v(" "),e("h2",{attrs:{id:"svn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#svn"}},[v._v("#")]),v._v(" SVN")]),v._v(" "),e("ul",[e("li",[v._v("SVN（Subversion）是一个开源的集中式版本控制系统，用于管理和跟踪文件和目录的变更历史。与分布式版本控制系统（如 Git）不同，SVN 采用集中式管理模型，所有的历史记录和版本信息都存储在中心服务器上。开发者通过在本地检出（checkout）项目副本进行工作，然后将更改提交（commit）回中心服务器。\n"),e("ol",[e("li",[v._v("集中式版本控制：SVN 是一种集中式版本控制系统，所有项目的版本历史都存储在中心服务器上。")]),v._v(" "),e("li",[v._v("原子提交：SVN 支持原子提交，意味着提交操作要么全部成功，要么全部失败。这有助于保持版本库的一致性。")]),v._v(" "),e("li",[v._v("分支和标签：SVN 支持创建分支和标签。分支用于开发新功能或修复错误，而标签用于标记特定的项目版本。")]),v._v(" "),e("li",[v._v("合并和冲突解决：SVN 允许开发者合并分支或者解决提交冲突，以便将更改整合到主干（trunk）中。")]),v._v(" "),e("li",[v._v("访问控制和权限管理：SVN 支持对不同的文件和目录设置访问权限，以确保只有授权用户可以访问特定资源。")])])])]),v._v(" "),e("blockquote",[e("p",[v._v("面试考察要点：")]),v._v(" "),e("ol",[e("li",[v._v("基本概念和原理：了解对 SVN 的核心概念（如集中式版本控制、原子提交等）的理解。")]),v._v(" "),e("li",[v._v("常用命令：询问在实际项目中使用过的 SVN 命令，如 checkout、commit、update、merge 等。")]),v._v(" "),e("li",[v._v("分支和标签管理：探讨在实际项目中如何使用分支和标签进行开发和版本管理。")]),v._v(" "),e("li",[v._v("冲突解决：了解在遇到提交冲突时的解决方法和经验。")]),v._v(" "),e("li",[v._v("权限管理：探讨如何使用 SVN 进行访问控制和权限管理。")]),v._v(" "),e("li",[v._v("集成其他工具：了解如何将 SVN 集成到其他开发工具和持续集成流程中。")]),v._v(" "),e("li",[v._v("迁移经验：如果曾经从 SVN 迁移到其他版本控制系统（如 Git），可以询问其迁移过程和经验。")]),v._v(" "),e("li",[v._v("与 Git 的比较：评估对 SVN 和 Git 的优缺点以及适用场景的理解。")])])])])}),[],!1,null,null,null);_.default=a.exports}}]);